/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RevenuePathInterface extends ethers.utils.Interface {
  functions: {
    "BASE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addRevenueTier(address[][],uint256[][],uint256[])": FunctionFragment;
    "getCurrentTier()": FunctionFragment;
    "getERC20Released(address,address)": FunctionFragment;
    "getErc20WalletShare(address)": FunctionFragment;
    "getEthWithdrawn(address)": FunctionFragment;
    "getFeeRequirementStatus()": FunctionFragment;
    "getImmutabilityStatus()": FunctionFragment;
    "getPendingEthBalance(address)": FunctionFragment;
    "getPlatformFee()": FunctionFragment;
    "getPlatformWallet()": FunctionFragment;
    "getRevenuePathName()": FunctionFragment;
    "getRevenueProportion(uint256,address)": FunctionFragment;
    "getRevenueTier(uint256)": FunctionFragment;
    "getTierDistributedAmount(uint256)": FunctionFragment;
    "getTotalErc20Released(address)": FunctionFragment;
    "getTotalEthReleased()": FunctionFragment;
    "getTotalFeeAccumulated()": FunctionFragment;
    "getTotalRevenueTiers()": FunctionFragment;
    "initialize(address[][],uint256[][],uint256[],(uint88,address,bool,string),address)": FunctionFragment;
    "owner()": FunctionFragment;
    "release(address)": FunctionFragment;
    "releaseERC20(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateErc20Distrbution(address[],uint256[])": FunctionFragment;
    "updateRevenueTier(address[],uint256[],uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRevenueTier",
    values: [string[][], BigNumberish[][], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getERC20Released",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getErc20WalletShare",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthWithdrawn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRequirementStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImmutabilityStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingEthBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevenuePathName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevenueProportion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevenueTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierDistributedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalErc20Released",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEthReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFeeAccumulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRevenueTiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string[][],
      BigNumberish[][],
      BigNumberish[],
      {
        platformFee: BigNumberish;
        platformWallet: string;
        isImmutable: boolean;
        name: string;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseERC20",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateErc20Distrbution",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRevenueTier",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRevenueTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC20Released",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getErc20WalletShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRequirementStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImmutabilityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevenuePathName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevenueProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevenueTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierDistributedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalErc20Released",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEthReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFeeAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRevenueTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateErc20Distrbution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRevenueTier",
    data: BytesLike
  ): Result;

  events: {
    "ERC20PaymentReleased(address,address,uint256)": EventFragment;
    "ERC20RevenueUpdated(address[],uint256[])": EventFragment;
    "EthDistributed(uint256,uint256,address[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReleased(address,uint256)": EventFragment;
    "RevenueTiersAdded(address[][],uint256[][],uint256)": EventFragment;
    "RevenueTiersUpdated(address[],uint256[],uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20RevenueUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueTiersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueTiersUpdated"): EventFragment;
}

export type ERC20PaymentReleasedEvent = TypedEvent<
  [string, string, BigNumber] & {
    token: string;
    account: string;
    payment: BigNumber;
  }
>;

export type ERC20RevenueUpdatedEvent = TypedEvent<
  [string[], BigNumber[]] & {
    updatedWalletLists: string[];
    updatedDistributionLists: BigNumber[];
  }
>;

export type EthDistributedEvent = TypedEvent<
  [BigNumber, BigNumber, string[]] & {
    amount: BigNumber;
    distributionTier: BigNumber;
    walletList: string[];
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaymentReleasedEvent = TypedEvent<
  [string, BigNumber] & { account: string; payment: BigNumber }
>;

export type RevenueTiersAddedEvent = TypedEvent<
  [string[][], BigNumber[][], BigNumber] & {
    addedWalletLists: string[][];
    addedDistributionLists: BigNumber[][];
    newTiersCount: BigNumber;
  }
>;

export type RevenueTiersUpdatedEvent = TypedEvent<
  [string[], BigNumber[], BigNumber, BigNumber] & {
    updatedWalletList: string[];
    updatedDistributionLists: BigNumber[];
    updatedTierNumber: BigNumber;
    newLimit: BigNumber;
  }
>;

export class RevenuePath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RevenuePathInterface;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[number]>;

    addRevenueTier(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      previousTierLimit: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tierNumber: BigNumber }>;

    getERC20Released(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getErc20WalletShare(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthWithdrawn(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeRequirementStatus(
      overrides?: CallOverrides
    ): Promise<[boolean] & { required: boolean }>;

    getImmutabilityStatus(overrides?: CallOverrides): Promise<[boolean]>;

    getPendingEthBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingAmount: BigNumber }>;

    getPlatformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlatformWallet(overrides?: CallOverrides): Promise<[string]>;

    getRevenuePathName(overrides?: CallOverrides): Promise<[string]>;

    getRevenueProportion(
      tier: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proportion: BigNumber }>;

    getRevenueTier(
      tierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { _limitAmount: BigNumber; _walletList: string[] }
    >;

    getTierDistributedAmount(
      tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getTotalErc20Released(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalEthReleased(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalFeeAccumulated(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getTotalRevenueTiers(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    initialize(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      _tierLimit: BigNumberish[],
      pathInfo: {
        platformFee: BigNumberish;
        platformWallet: string;
        isImmutable: boolean;
        name: string;
      },
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseERC20(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateErc20Distrbution(
      _walletList: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRevenueTier(
      _walletList: string[],
      _distribution: BigNumberish[],
      newLimit: BigNumberish,
      tierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<number>;

  addRevenueTier(
    _walletList: string[][],
    _distribution: BigNumberish[][],
    previousTierLimit: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTier(overrides?: CallOverrides): Promise<BigNumber>;

  getERC20Released(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getErc20WalletShare(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthWithdrawn(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeRequirementStatus(overrides?: CallOverrides): Promise<boolean>;

  getImmutabilityStatus(overrides?: CallOverrides): Promise<boolean>;

  getPendingEthBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPlatformWallet(overrides?: CallOverrides): Promise<string>;

  getRevenuePathName(overrides?: CallOverrides): Promise<string>;

  getRevenueProportion(
    tier: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevenueTier(
    tierNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[]] & { _limitAmount: BigNumber; _walletList: string[] }
  >;

  getTierDistributedAmount(
    tier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalErc20Released(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalEthReleased(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalFeeAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalRevenueTiers(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _walletList: string[][],
    _distribution: BigNumberish[][],
    _tierLimit: BigNumberish[],
    pathInfo: {
      platformFee: BigNumberish;
      platformWallet: string;
      isImmutable: boolean;
      name: string;
    },
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseERC20(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateErc20Distrbution(
    _walletList: string[],
    _distribution: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRevenueTier(
    _walletList: string[],
    _distribution: BigNumberish[],
    newLimit: BigNumberish,
    tierNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<number>;

    addRevenueTier(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      previousTierLimit: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTier(overrides?: CallOverrides): Promise<BigNumber>;

    getERC20Released(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErc20WalletShare(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthWithdrawn(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRequirementStatus(overrides?: CallOverrides): Promise<boolean>;

    getImmutabilityStatus(overrides?: CallOverrides): Promise<boolean>;

    getPendingEthBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformWallet(overrides?: CallOverrides): Promise<string>;

    getRevenuePathName(overrides?: CallOverrides): Promise<string>;

    getRevenueProportion(
      tier: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevenueTier(
      tierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { _limitAmount: BigNumber; _walletList: string[] }
    >;

    getTierDistributedAmount(
      tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalErc20Released(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEthReleased(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFeeAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRevenueTiers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      _tierLimit: BigNumberish[],
      pathInfo: {
        platformFee: BigNumberish;
        platformWallet: string;
        isImmutable: boolean;
        name: string;
      },
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    release(account: string, overrides?: CallOverrides): Promise<void>;

    releaseERC20(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateErc20Distrbution(
      _walletList: string[],
      _distribution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRevenueTier(
      _walletList: string[],
      _distribution: BigNumberish[],
      newLimit: BigNumberish,
      tierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC20PaymentReleased(address,address,uint256)"(
      token?: string | null,
      account?: string | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; payment: BigNumber }
    >;

    ERC20PaymentReleased(
      token?: string | null,
      account?: string | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; account: string; payment: BigNumber }
    >;

    "ERC20RevenueUpdated(address[],uint256[])"(
      updatedWalletLists?: null,
      updatedDistributionLists?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { updatedWalletLists: string[]; updatedDistributionLists: BigNumber[] }
    >;

    ERC20RevenueUpdated(
      updatedWalletLists?: null,
      updatedDistributionLists?: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { updatedWalletLists: string[]; updatedDistributionLists: BigNumber[] }
    >;

    "EthDistributed(uint256,uint256,address[])"(
      amount?: BigNumberish | null,
      distributionTier?: BigNumberish | null,
      walletList?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string[]],
      { amount: BigNumber; distributionTier: BigNumber; walletList: string[] }
    >;

    EthDistributed(
      amount?: BigNumberish | null,
      distributionTier?: BigNumberish | null,
      walletList?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string[]],
      { amount: BigNumber; distributionTier: BigNumber; walletList: string[] }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaymentReleased(address,uint256)"(
      account?: string | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; payment: BigNumber }
    >;

    PaymentReleased(
      account?: string | null,
      payment?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; payment: BigNumber }
    >;

    "RevenueTiersAdded(address[][],uint256[][],uint256)"(
      addedWalletLists?: null,
      addedDistributionLists?: null,
      newTiersCount?: BigNumberish | null
    ): TypedEventFilter<
      [string[][], BigNumber[][], BigNumber],
      {
        addedWalletLists: string[][];
        addedDistributionLists: BigNumber[][];
        newTiersCount: BigNumber;
      }
    >;

    RevenueTiersAdded(
      addedWalletLists?: null,
      addedDistributionLists?: null,
      newTiersCount?: BigNumberish | null
    ): TypedEventFilter<
      [string[][], BigNumber[][], BigNumber],
      {
        addedWalletLists: string[][];
        addedDistributionLists: BigNumber[][];
        newTiersCount: BigNumber;
      }
    >;

    "RevenueTiersUpdated(address[],uint256[],uint256,uint256)"(
      updatedWalletList?: null,
      updatedDistributionLists?: null,
      updatedTierNumber?: BigNumberish | null,
      newLimit?: BigNumberish | null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber, BigNumber],
      {
        updatedWalletList: string[];
        updatedDistributionLists: BigNumber[];
        updatedTierNumber: BigNumber;
        newLimit: BigNumber;
      }
    >;

    RevenueTiersUpdated(
      updatedWalletList?: null,
      updatedDistributionLists?: null,
      updatedTierNumber?: BigNumberish | null,
      newLimit?: BigNumberish | null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber, BigNumber],
      {
        updatedWalletList: string[];
        updatedDistributionLists: BigNumber[];
        updatedTierNumber: BigNumber;
        newLimit: BigNumber;
      }
    >;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addRevenueTier(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      previousTierLimit: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTier(overrides?: CallOverrides): Promise<BigNumber>;

    getERC20Released(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getErc20WalletShare(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthWithdrawn(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeRequirementStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getImmutabilityStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingEthBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getRevenuePathName(overrides?: CallOverrides): Promise<BigNumber>;

    getRevenueProportion(
      tier: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevenueTier(
      tierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTierDistributedAmount(
      tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalErc20Released(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEthReleased(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFeeAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRevenueTiers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      _tierLimit: BigNumberish[],
      pathInfo: {
        platformFee: BigNumberish;
        platformWallet: string;
        isImmutable: boolean;
        name: string;
      },
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseERC20(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateErc20Distrbution(
      _walletList: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRevenueTier(
      _walletList: string[],
      _distribution: BigNumberish[],
      newLimit: BigNumberish,
      tierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRevenueTier(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      previousTierLimit: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getERC20Released(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getErc20WalletShare(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthWithdrawn(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeRequirementStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImmutabilityStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingEthBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlatformWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRevenuePathName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevenueProportion(
      tier: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevenueTier(
      tierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTierDistributedAmount(
      tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalErc20Released(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEthReleased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalFeeAccumulated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRevenueTiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      _tierLimit: BigNumberish[],
      pathInfo: {
        platformFee: BigNumberish;
        platformWallet: string;
        isImmutable: boolean;
        name: string;
      },
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseERC20(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateErc20Distrbution(
      _walletList: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRevenueTier(
      _walletList: string[],
      _distribution: BigNumberish[],
      newLimit: BigNumberish,
      tierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
