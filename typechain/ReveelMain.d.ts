/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReveelMainInterface extends ethers.utils.Interface {
  functions: {
    "createRevenuePath(address[][],uint256[][],uint256[],string,bool)": FunctionFragment;
    "getLibraryAddress()": FunctionFragment;
    "getPaths()": FunctionFragment;
    "getPlatformFee()": FunctionFragment;
    "getPlatformWallet()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLibraryAddress(address)": FunctionFragment;
    "setPlatformFee(uint88)": FunctionFragment;
    "setPlatformWallet(address)": FunctionFragment;
    "toggleContractState()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRevenuePath",
    values: [string[][], BigNumberish[][], BigNumberish[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPaths", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlatformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLibraryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleContractState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRevenuePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPaths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RevenuePathCreated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdatedLibraryAddress(address)": EventFragment;
    "UpdatedPlatformFee(uint88)": EventFragment;
    "UpdatedPlatformWallet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenuePathCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedLibraryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPlatformFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedPlatformWallet"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RevenuePathCreatedEvent = TypedEvent<[string] & { path: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpdatedLibraryAddressEvent = TypedEvent<
  [string] & { newLibrary: string }
>;

export type UpdatedPlatformFeeEvent = TypedEvent<
  [BigNumber] & { newFeePercentage: BigNumber }
>;

export type UpdatedPlatformWalletEvent = TypedEvent<
  [string] & { newWallet: string }
>;

export class ReveelMain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReveelMainInterface;

  functions: {
    createRevenuePath(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      tierLimit: BigNumberish[],
      _name: string,
      isImmutable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLibraryAddress(overrides?: CallOverrides): Promise<[string]>;

    getPaths(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber] & { totalPaths: BigNumber }>;

    getPlatformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlatformWallet(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLibraryAddress(
      _libraryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatformWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleContractState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createRevenuePath(
    _walletList: string[][],
    _distribution: BigNumberish[][],
    tierLimit: BigNumberish[],
    _name: string,
    isImmutable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLibraryAddress(overrides?: CallOverrides): Promise<string>;

  getPaths(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber] & { totalPaths: BigNumber }>;

  getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPlatformWallet(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLibraryAddress(
    _libraryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    newFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatformWallet(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleContractState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createRevenuePath(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      tierLimit: BigNumberish[],
      _name: string,
      isImmutable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getLibraryAddress(overrides?: CallOverrides): Promise<string>;

    getPaths(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber] & { totalPaths: BigNumber }>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformWallet(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLibraryAddress(
      _libraryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      newFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformWallet(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleContractState(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RevenuePathCreated(address)"(
      path?: string | null
    ): TypedEventFilter<[string], { path: string }>;

    RevenuePathCreated(
      path?: string | null
    ): TypedEventFilter<[string], { path: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "UpdatedLibraryAddress(address)"(
      newLibrary?: null
    ): TypedEventFilter<[string], { newLibrary: string }>;

    UpdatedLibraryAddress(
      newLibrary?: null
    ): TypedEventFilter<[string], { newLibrary: string }>;

    "UpdatedPlatformFee(uint88)"(
      newFeePercentage?: null
    ): TypedEventFilter<[BigNumber], { newFeePercentage: BigNumber }>;

    UpdatedPlatformFee(
      newFeePercentage?: null
    ): TypedEventFilter<[BigNumber], { newFeePercentage: BigNumber }>;

    "UpdatedPlatformWallet(address)"(
      newWallet?: null
    ): TypedEventFilter<[string], { newWallet: string }>;

    UpdatedPlatformWallet(
      newWallet?: null
    ): TypedEventFilter<[string], { newWallet: string }>;
  };

  estimateGas: {
    createRevenuePath(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      tierLimit: BigNumberish[],
      _name: string,
      isImmutable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLibraryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPaths(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformWallet(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLibraryAddress(
      _libraryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatformWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleContractState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRevenuePath(
      _walletList: string[][],
      _distribution: BigNumberish[][],
      tierLimit: BigNumberish[],
      _name: string,
      isImmutable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLibraryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlatformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlatformWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLibraryAddress(
      _libraryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      newFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformWallet(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleContractState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
